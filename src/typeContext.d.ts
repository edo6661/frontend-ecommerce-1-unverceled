import { NavigateFunction } from 'reactrouter-dom';

interface AuthContextType {
	user?: User | null;
	setUser?: React.Dispatch<React.SetStateAction<User | null>>;
	login?: (userData: User) => void;
	logout?: () => void;
	isLoading?: boolean;
	setIsLoading?: React.Dispatch<React.SetStateAction<boolean>>;
	checkout?: boolean;
	setCheckout?: React.Dispatch<React.SetStateAction<boolean>>;
	navigate?: NavigateFunction;
	products?: Products[] | [];
	setProducts?: React.Dispatch<React.SetStateAction<[Products] | []>>;
	sellerProducts?: Products[] | [];
	setSellerProducts?: React.Dispatch<React.SetStateAction<[Products] | []>>;
	fetchProducts?: () => Promise<void>;
	addToCart?: (productId: string, quantity?: number) => Promise<void>;
	updateUser?: (newData: User) => void;
	reviews?: Review[] | [];
	setReviews?: React.Dispatch<React.SetStateAction<Review[] | []>>;
	getReview?: (id: string) => void;
	reviewDetails?: Review[] | [];
	setReviewDetails?: React.Dispatch<React.SetStateAction<Review[] | []>>;
	reviewDetail?: (id: string) => void;
	showNoCart: boolean;
	setShowNoCart: React.Dispatch<React.SetStateAction<boolean>>;
	cart: CartProducts | null;
	setCart: React.Dispatch<React.SetStateAction<CartProducts | null>>;
	getCart: () => Promise<void>;
	getOrders: () => Promise<void>;
	orders: OrderDocument[] | [];
	setOrders: React.Dispatch<React.SetStateAction<OrderDocument[] | []>>;
	getReviewByUser: () => Promise<void>;
	review: Review[] | [];
	setReview: React.Dispatch<React.SetStateAction<Review[] | []>>;
	fetchProductById: (productId: string) => Promise<void>;
	product: Products | null;
	setProduct: React.Dispatch<React.SetStateAction<Products | null>>;
	showNoOrders: boolean;
	productsChanged: boolean;
	setProductsChanged: React.Dispatch<React.SetStateAction<boolean>>;
	productChanged: boolean;
	setProductChanged: React.Dispatch<React.SetStateAction<boolean>>;
	sellerProductChanged: boolean;
	setSellerProductChanged: React.Dispatch<React.SetStateAction<boolean>>;
	page: number;
	setPage: React.Dispatch<React.SetStateAction<number>>;
	pageCount: number;
	setPageCount: React.Dispatch<React.SetStateAction<number>>;
	dataPromise?: DataPromiseType;
	search: string;
	setSearch: React.Dispatch<React.SetStateAction<string>>;
	setBrand: React.Dispatch<React.SetStateAction<string>>;
	setCategory: React.Dispatch<React.SetStateAction<string>>;
	category: string;
	brand: string;
	modeNav: boolean;
	setModeNav: React.Dispatch<React.SetStateAction<boolean>>;
	dropdownBrand: boolean;
	setDropdownBrand: React.Dispatch<React.SetStateAction<boolean>>;
	dropdownCategory: boolean;
	setDropdownCategory: React.Dispatch<React.SetStateAction<boolean>>;
	activeBrand: Array<JSX.Element>;
	activeCategory: Array<JSX.Element>;
	handleCatButton: (cat: string) => void;
	handleBrandButton: (brand: string) => void;
	searchInput: JSX.Element | boolean;
	elementPagination: JSX.Element;
	edit: boolean;
	setEdit: React.Dispatch<React.SetStateAction<boolean>>;
	handleEdit: (e: React.SyntheticEvent) => void;
	clickedBrand: boolean;
	setClickedBrand: React.Dispatch<React.SetStateAction<boolean>>;
	clickedCategory: boolean;
	setClickedCategory: React.Dispatch<React.SetStateAction<boolean>>;
	ordersChanged: boolean;
	setOrdersChanged: React.Dispatch<React.SetStateAction<boolean>>;
	reviewChanged: boolean;
	setReviewDetailChanged: React.Dispatch<React.SetStateAction<boolean>>;
	reviewDetailChanged: boolean;
	setReviewChanged: React.Dispatch<React.SetStateAction<boolean>>;
	showProducts: boolean;
}

type DataPromiseType = {
	pagination: {
		count: number;
		pageCount: number;
	};
	items: Products[];
};
